"use strict";

var SIZE_ROW = 20;
var SIZE_COL = 20;

function randomInteger(min, max) {
  var rand = min - 0.5 + Math.random() * (max - min + 1);
  rand = Math.round(rand);
  return rand;
}

function Shake(matrix) {
  var currentCourse = { row: 1, col: 0 };
  var body = [{
    row: randomInteger(0, SIZE_ROW),
    col: randomInteger(0, SIZE_COL)
  }];

  matrix.fireCells(body);

  function move() {
    var head = body[0];

    console.log(head);
    var nextHead = getNextCoordinates(head, currentCourse);
    console.log(head);

    body.unshift(nextHead);
    matrix.fireCells([nextHead]);

    var tail = body.pop();
    matrix.cleanCells([tail]);
  }

  function getNextCoordinates(coordinates, currentCourse) {
    coordinates.test = 1;
    var newCoordinates = {
      row: coordinates.row + currentCourse.row,
      col: coordinates.col + currentCourse.col
    };

    if (newCoordinates.row < 0) {
      newCoordinates.row = SIZE_ROW - 1;
    }

    if (newCoordinates.row === SIZE_ROW) {
      newCoordinates.row = 0;
    }

    if (newCoordinates.col < 0) {
      newCoordinates.col = SIZE_COL - 1;
    }

    if (newCoordinates.col === SIZE_COL) {
      newCoordinates.col = 0;
    }

    return newCoordinates;
  }

  function setCourse(course) {
    var COURSE = {
      "ArrowUp": { row: -1, col: 0 },
      "ArrowDown": { row: 1, col: 0 },
      "ArrowRight": { row: 0, col: 1 },
      "ArrowLeft": { row: 0, col: -1 }
    };

    currentCourse = COURSE[course];
  }

  return {
    move: move,
    setCourse: setCourse
  };
}

function MATRIX($container, i, j) {
  $container.css({
    width: 40 * i + 50,
    height: 40 * j + 50
  });

  for (var row = 0; row < i; row++) {
    for (var col = 0; col < j; col++) {
      $container.append("<div class='block' data-row='" + row + "' data-col='" + col + "'/>" //prepend
      );
    }
  }

  function fireCells(coordinates) {
    for (var i = 0; i < coordinates.length; i++) {
      $('.block[data-row=' + coordinates[i].row + '][data-col=' + coordinates[i].col + ']').addClass('blue');
    }
  }

  function cleanCells(coordinates) {
    for (var i = 0; i < coordinates.length; i++) {
      $('.block[data-row=' + coordinates[i].row + '][data-col=' + coordinates[i].col + ']').removeClass('blue');
    }
  }

  return {
    cleanCells: cleanCells,
    fireCells: fireCells
  };
}

function start() {
  var matrix = MATRIX($('#matrix'), SIZE_COL, SIZE_ROW);
  var snake = Shake(matrix);

  $(window).keydown(function (e) {
    snake.setCourse(e.key);
  });

  setInterval(function () {
    snake.move();
  }, 300);
}

start();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImN1c3RvbS5qcyJdLCJuYW1lcyI6WyJTSVpFX1JPVyIsIlNJWkVfQ09MIiwicmFuZG9tSW50ZWdlciIsIm1pbiIsIm1heCIsInJhbmQiLCJNYXRoIiwicmFuZG9tIiwicm91bmQiLCJTaGFrZSIsIm1hdHJpeCIsImN1cnJlbnRDb3Vyc2UiLCJyb3ciLCJjb2wiLCJib2R5IiwiZmlyZUNlbGxzIiwibW92ZSIsImhlYWQiLCJjb25zb2xlIiwibG9nIiwibmV4dEhlYWQiLCJnZXROZXh0Q29vcmRpbmF0ZXMiLCJ1bnNoaWZ0IiwidGFpbCIsInBvcCIsImNsZWFuQ2VsbHMiLCJjb29yZGluYXRlcyIsInRlc3QiLCJuZXdDb29yZGluYXRlcyIsInNldENvdXJzZSIsImNvdXJzZSIsIkNPVVJTRSIsIk1BVFJJWCIsIiRjb250YWluZXIiLCJpIiwiaiIsImNzcyIsIndpZHRoIiwiaGVpZ2h0IiwiYXBwZW5kIiwibGVuZ3RoIiwiJCIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJzdGFydCIsInNuYWtlIiwid2luZG93Iiwia2V5ZG93biIsImUiLCJrZXkiLCJzZXRJbnRlcnZhbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxXQUFXLEVBQWY7QUFDQSxJQUFJQyxXQUFXLEVBQWY7O0FBRUEsU0FBU0MsYUFBVCxDQUF1QkMsR0FBdkIsRUFBNEJDLEdBQTVCLEVBQWlDO0FBQy9CLE1BQUlDLE9BQU9GLE1BQU0sR0FBTixHQUFZRyxLQUFLQyxNQUFMLE1BQWlCSCxNQUFNRCxHQUFOLEdBQVksQ0FBN0IsQ0FBdkI7QUFDQUUsU0FBT0MsS0FBS0UsS0FBTCxDQUFXSCxJQUFYLENBQVA7QUFDQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksS0FBVCxDQUFlQyxNQUFmLEVBQXVCO0FBQ3JCLE1BQUlDLGdCQUFnQixFQUFFQyxLQUFLLENBQVAsRUFBVUMsS0FBSyxDQUFmLEVBQXBCO0FBQ0EsTUFBSUMsT0FBTyxDQUFDO0FBQ1ZGLFNBQUtWLGNBQWMsQ0FBZCxFQUFp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QztBQUM1Q08sUUFBRSxxQkFBcUJmLFlBQVlRLENBQVosRUFBZXRCLEdBQXBDLEdBQTBDLGFBQTFDLEdBQTBEYyxZQUFZUSxDQUFaLEVBQWVyQixHQUF6RSxHQUErRSxHQUFqRixFQUNHNkIsUUFESCxDQUNZLE1BRFo7QUFFRDtBQUNGOztBQUVELFdBQVNqQixVQUFULENBQW9CQyxXQUFwQixFQUFpQztBQUMvQixTQUFLLElBQUlRLElBQUksQ0FBYixFQUFnQkEsSUFBSVIsWUFBWWMsTUFBaEMsRUFBd0NOLEdBQXhDLEVBQThDO0FBQzVDTyxRQUFFLHFCQUFxQmYsWUFBWVEsQ0FBWixFQUFldEIsR0FBcEMsR0FBMEMsYUFBMUMsR0FBMERjLFlBQVlRLENBQVosRUFBZXJCLEdBQXpFLEdBQStFLEdBQWpGLEVBQ0c4QixXQURILENBQ2UsTUFEZjtBQUVEO0FBQ0Y7O0FBRUQsU0FBTztBQUNMbEIsZ0JBQVlBLFVBRFA7QUFFTFYsZUFBV0E7QUFGTixHQUFQO0FBSUQ7O0FBRUQsU0FBUzZCLEtBQVQsR0FBaUI7QUFDZixNQUFJbEMsU0FBU3NCLE9BQU9TLEVBQUUsU0FBRixDQUFQLEVBQXFCeEMsUUFBckIsRUFBK0JELFFBQS9CLENBQWI7QUFDQSxNQUFJNkMsUUFBUXBDLE1BQU1DLE1BQU4sQ0FBWjs7QUFHQStCLElBQUVLLE1BQUYsRUFBVUMsT0FBVixDQUFrQixVQUFTQyxDQUFULEVBQVk7QUFDNUJILFVBQU1oQixTQUFOLENBQWdCbUIsRUFBRUMsR0FBbEI7QUFDRCxHQUZEOztBQUlBQyxjQUFZLFlBQVc7QUFDckJMLFVBQU03QixJQUFOO0FBQ0QsR0FGRCxFQUVHLEdBRkg7QUFHRDs7QUFFRDRCIiwiZmlsZSI6ImN1c3RvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBTSVpFX1JPVyA9IDIwO1xudmFyIFNJWkVfQ09MID0gMjA7XG5cbmZ1bmN0aW9uIHJhbmRvbUludGVnZXIobWluLCBtYXgpIHtcbiAgdmFyIHJhbmQgPSBtaW4gLSAwLjUgKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpXG4gIHJhbmQgPSBNYXRoLnJvdW5kKHJhbmQpO1xuICByZXR1cm4gcmFuZDtcbn1cblxuZnVuY3Rpb24gU2hha2UobWF0cml4KSB7XG4gIHZhciBjdXJyZW50Q291cnNlID0geyByb3c6IDEsIGNvbDogMCB9O1xuICB2YXIgYm9keSA9IFt7XG4gICAgcm93OiByYW5kb21JbnRlZ2VyKDAsIFNJWkVfUk9XKSxcbiAgICBjb2w6IHJhbmRvbUludGVnZXIoMCwgU0laRV9DT0wpXG4gIH1dO1xuXG4gIG1hdHJpeC5maXJlQ2VsbHMoYm9keSk7XG5cbiAgZnVuY3Rpb24gbW92ZSgpIHtcbiAgICB2YXIgaGVhZCA9IGJvZHlbMF07XG5cbiAgICBjb25zb2xlLmxvZyhoZWFkKTtcbiAgICB2YXIgbmV4dEhlYWQgPSBnZXROZXh0Q29vcmRpbmF0ZXMoaGVhZCwgY3VycmVudENvdXJzZSk7XG4gICAgY29uc29sZS5sb2coaGVhZCk7XG5cbiAgICBib2R5LnVuc2hpZnQobmV4dEhlYWQpO1xuICAgIG1hdHJpeC5maXJlQ2VsbHMoW25leHRIZWFkXSk7XG5cbiAgICB2YXIgdGFpbCA9IGJvZHkucG9wKCk7XG4gICAgbWF0cml4LmNsZWFuQ2VsbHMoW3RhaWxdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE5leHRDb29yZGluYXRlcyhjb29yZGluYXRlcywgY3VycmVudENvdXJzZSkge1xuICAgIGNvb3JkaW5hdGVzLnRlc3QgPSAxO1xuICAgIHZhciBuZXdDb29yZGluYXRlcyA9IHtcbiAgICAgIHJvdzogY29vcmRpbmF0ZXMucm93ICsgY3VycmVudENvdXJzZS5yb3csXG4gICAgICBjb2w6IGNvb3JkaW5hdGVzLmNvbCArIGN1cnJlbnRDb3Vyc2UuY29sXG4gICAgfTtcblxuXG4gICAgaWYoIG5ld0Nvb3JkaW5hdGVzLnJvdyA8IDAgKSB7XG4gICAgICBuZXdDb29yZGluYXRlcy5yb3cgPSBTSVpFX1JPVyAtIDE7XG4gICAgfVxuXG4gICAgaWYoIG5ld0Nvb3JkaW5hdGVzLnJvdyA9PT0gU0laRV9ST1cgKSB7XG4gICAgICBuZXdDb29yZGluYXRlcy5yb3cgPSAwO1xuICAgIH1cblxuICAgIGlmKCBuZXdDb29yZGluYXRlcy5jb2wgPCAwICkge1xuICAgICAgbmV3Q29vcmRpbmF0ZXMuY29sID0gU0laRV9DT0wgLSAxO1xuICAgIH1cblxuICAgIGlmKCBuZXdDb29yZGluYXRlcy5jb2wgPT09IFNJWkVfQ09MICkge1xuICAgICAgbmV3Q29vcmRpbmF0ZXMuY29sID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3Q29vcmRpbmF0ZXM7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRDb3Vyc2UoY291cnNlKSB7XG4gICAgdmFyIENPVVJTRSA9IHtcbiAgICAgIFwiQXJyb3dVcFwiOiB7IHJvdzogLTEsIGNvbDogMCB9LFxuICAgICAgXCJBcnJvd0Rvd25cIjogeyByb3c6IDEsIGNvbDogMCB9LFxuICAgICAgXCJBcnJvd1JpZ2h0XCI6IHsgcm93OiAwLCBjb2w6IDEgfSxcbiAgICAgIFwiQXJyb3dMZWZ0XCI6IHsgcm93OiAwLCBjb2w6IC0xIH0sXG4gICAgfTtcblxuICAgIGN1cnJlbnRDb3Vyc2UgPSBDT1VSU0VbY291cnNlXTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW92ZTogbW92ZSxcbiAgICBzZXRDb3Vyc2U6IHNldENvdXJzZVxuICB9XG59XG5cbmZ1bmN0aW9uIE1BVFJJWCgkY29udGFpbmVyLCBpLCBqKSB7XG4gICRjb250YWluZXIuY3NzKHtcbiAgICB3aWR0aDogNDAgKiBpICsgNTAsXG4gICAgaGVpZ2h0OiA0MCAqIGogKyA1MCxcbiAgfSk7XG5cbiAgZm9yKCB2YXIgcm93ID0gMDsgcm93IDwgaTsgcm93KysgKSB7XG4gICAgZm9yKCB2YXIgY29sID0gMDsgY29sIDwgajsgY29sKysgKSB7XG4gICAgICAkY29udGFpbmVyLmFwcGVuZChcIjxkaXYgY2xhc3M9J2Jsb2NrJyBkYXRhLXJvdz0nXCIgKyByb3cgKyBcIicgZGF0YS1jb2w9J1wiICsgY29sICsgXCInLz5cIikgLy9wcmVwZW5kXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmlyZUNlbGxzKGNvb3JkaW5hdGVzKSB7XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBjb29yZGluYXRlcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICQoJy5ibG9ja1tkYXRhLXJvdz0nICsgY29vcmRpbmF0ZXNbaV0ucm93ICsgJ11bZGF0YS1jb2w9JyArIGNvb3JkaW5hdGVzW2ldLmNvbCArICddJylcbiAgICAgICAgLmFkZENsYXNzKCdibHVlJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW5DZWxscyhjb29yZGluYXRlcykge1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgY29vcmRpbmF0ZXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAkKCcuYmxvY2tbZGF0YS1yb3c9JyArIGNvb3JkaW5hdGVzW2ldLnJvdyArICddW2RhdGEtY29sPScgKyBjb29yZGluYXRlc1tpXS5jb2wgKyAnXScpXG4gICAgICAgIC5yZW1vdmVDbGFzcygnYmx1ZScpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY2xlYW5DZWxsczogY2xlYW5DZWxscyxcbiAgICBmaXJlQ2VsbHM6IGZpcmVDZWxsc1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0KCkge1xuICB2YXIgbWF0cml4ID0gTUFUUklYKCQoJyNtYXRyaXgnKSwgU0laRV9DT0wsIFNJWkVfUk9XKTtcbiAgdmFyIHNuYWtlID0gU2hha2UobWF0cml4KTtcblxuXG4gICQod2luZG93KS5rZXlkb3duKGZ1bmN0aW9uKGUpIHtcbiAgICBzbmFrZS5zZXRDb3Vyc2UoZS5rZXkpO1xuICB9KTtcblxuICBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICBzbmFrZS5tb3ZlKCk7XG4gIH0sIDMwMCk7XG59XG5cbnN0YXJ0KCk7XG5cblxuIl19
