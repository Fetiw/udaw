"use strict";

var SIZE_ROW = 20;
var SIZE_COL = 20;

var randomInteger = function randomInteger(min, max) {
  var rand = min - 0.5 + Math.random() * (max - min + 1);
  rand = Math.round(rand);
  return rand;
};

var Snake = function Snake(matrix, food, row, col) {
  var TYPE = 'snake';
  var currentCourse = { row: 1, col: 0 };
  var body = [{
    row: randomInteger(0, row),
    col: randomInteger(0, col)
  }];

  matrix.fireCells(body, TYPE);

  var move = function move() {
    var head = body[0];
    var nextHead = getNextCoordinates(head, currentCourse);

    body.unshift(nextHead);
    matrix.fireCells([nextHead], TYPE);

    if (!matrix.checkFood(nextHead)) {
      var tail = body.pop();
      matrix.cleanCells([tail]);
    } else {
      food();
    }
  };

  var getNextCoordinates = function getNextCoordinates(coordinates, currentCourse) {
    var newCoordinates = {
      row: coordinates.row + currentCourse.row,
      col: coordinates.col + currentCourse.col
    };

    if (newCoordinates.row < 0) {
      newCoordinates.row = row - 1;
    }

    if (newCoordinates.row === row) {
      newCoordinates.row = 0;
    }

    if (newCoordinates.col < 0) {
      newCoordinates.col = col - 1;
    }

    if (newCoordinates.col === col) {
      newCoordinates.col = 0;
    }

    return newCoordinates;
  };

  var setCourse = function setCourse(course) {
    var COURSE = {
      "ArrowUp": { row: -1, col: 0 },
      "ArrowDown": { row: 1, col: 0 },
      "ArrowRight": { row: 0, col: 1 },
      "ArrowLeft": { row: 0, col: -1 }
    };

    currentCourse = COURSE[course];
  };

  return { move: move, setCourse: setCourse };
};

var MATRIX = function MATRIX($container, row, col) {
  $container.css({
    width: 40 * row + 50,
    height: 40 * col + 50
  });

  for (var i = 0; i < row; i++) {
    for (var j = 0; j < col; j++) {
      $container.append("<div class='block' data-row=" + i + " data-col=" + j + "/>");
    }
  }

  var fireCells = function fireCells(coordinates, type) {
    for (var _i = 0; _i < coordinates.length; _i++) {
      $(".block[data-row=" + coordinates[_i].row + "][data-col=" + coordinates[_i].col + "]").addClass(type);
    }
  };

  var cleanCells = function cleanCells(coordinates) {
    for (var _i2 = 0; _i2 < coordinates.length; _i2++) {
      $(".block[data-row=" + coordinates[_i2].row + "][data-col=" + coordinates[_i2].col + "]").removeClass('snake').removeClass('food');
    }
  };

  var checkFood = function checkFood(coordinate) {
    return $(".block[data-row=" + coordinate.row + "][data-col=" + coordinate.col + "]").hasClass('food');
  };

  return { cleanCells: cleanCells, fireCells: fireCells, checkFood: checkFood };
};

var Food = function Food(matrix, row, col) {
  return function () {
    matrix.fireCells([{
      row: randomInteger(0, row),
      col: randomInteger(0, col)
    }], 'food');
  };
};

var start = function start() {
  var matrix = MATRIX($('#matrix'), SIZE_COL, SIZE_ROW);
  var food = Food(matrix, SIZE_ROW, SIZE_COL);
  var snake = Snake(matrix, food, SIZE_ROW, SIZE_COL);

  food();

  $(window).keydown(function (e) {
    snake.setCourse(e.key);
  });

  setInterval(function () {
    snake.move();
  }, 100);
};

start();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
